name: build

on: 
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env: 
  CUDA_ARCH: 30
jobs:
  linux-build:
    runs-on: ubuntu-18.04
    container: nvidia/cuda:10.1-devel-ubuntu18.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2 

    - name: Install GLM and OpenMP
      run: apt update && apt install -y libglm-dev libgomp1 git mesa-common-dev libglu1-mesa-dev libxi-dev 
    
    - name: Install CMake
      run: |
        apt install -y wget
        wget https://github.com/Kitware/CMake/releases/download/v3.13.0/cmake-3.13.0-Linux-x86_64.sh -q -O ./cmake-install.sh 
        chmod u+x ./cmake-install.sh
        mkdir "$HOME"/cmake
        ./cmake-install.sh --skip-license --prefix="$HOME"/cmake
        rm ./cmake-install.sh
    
    - name: Build Trimesh2
      run: |
        git clone -b 2020.03.04 https://github.com/Forceflow/trimesh2.git ../trimesh2
        cd ../trimesh2 && make all -j 2 && make clean && cd -

    - name: Build cuda_voxelizer
      run: |
        PATH=$PATH:"$HOME"/cmake/bin
        mkdir ./build
        cd ./build
        cmake -DTrimesh2_INCLUDE_DIR="../../trimesh2/include" -DTrimesh2_LINK_DIR="../../trimesh2/lib.Linux64" -DCUDA_ARCH=${CUDA_ARCH} ..
        cmake --build . -j 2
    - name: Test
      run: ./build/cuda_voxelizer -f ./test_models/bunny.OBJ -s 64 -cpu
  
  windows-build:
    runs-on: windows-2019
    env:
      CUDA_PATH_V10_1: 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install CUDA 11.3
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://developer.download.nvidia.com/compute/cuda/11.3.0/local_installers/cuda_11.3.0_465.89_win10.exe", ".\cuda.exe")
        Start-Process -FilePath .\cuda.exe -ArgumentList "-s","nvcc_11.3","cudart_11.3","visual_studio_integration_11.3" -Wait -NoNewWindow
        rm .\cuda.exe

    - name: Install GLM
      run: |
        vcpkg.exe install glm:x64-windows

    - name: Cache Trimesh2
      id: trimesh2-cache
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}\trimesh2-build
        key: ${{ runner.os }}-build-trimesh2-cache
   
    - name: Build Trimesh2
      if: steps.trimesh2-cache.outputs.cache-hit != 'true'
      run: |
        Install-Module VSSetup -Scope CurrentUser -Force
        git clone -b 2020.03.04 https://github.com/Forceflow/trimesh2.git ..\trimesh2
        cd ..\trimesh2
        & (Join-Path (Get-VSSetupInstance).InstallationPath -ChildPath MSBuild\Current\Bin\msbuild.exe) .\msvc\vs2019\trimesh2.sln -nologo -m:2 /t:libsrc /p:Configuration=Release /p:Platform=x64
        mkdir ..\trimesh2-build
        Move-Item .\include ..\trimesh2-build
        Move-Item .\lib.Win64.vs142 ..\trimesh2-build
        cd -
        rm -Recurse -Force ..\trimesh2

    - name: Build cuda_voxelizer
      run: |
        $trimeshDir = "..\trimesh2-build"
        mkdir .\build
        & cmake -A x64 -DCMAKE_TOOLCHAIN_FILE:FILEPATH="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DTrimesh2_INCLUDE_DIR:PATH="$trimeshDir\include" -DTrimesh2_LINK_DIR:PATH="$trimeshDir\lib.Win64.vs142" -DCUDA_ARCH:STRING=$env:CUDA_ARCH -DCMAKE_BUILD_TYPE=Release -S . -B .\build
        & cmake --build .\build -j 2 --target ALL_BUILD --config Release
    
    - name: Test cuda_voxelizer
      run: .\build\Release\cuda_voxelizer.exe -f .\test_models\bunny.OBJ -s 64 -cpu
